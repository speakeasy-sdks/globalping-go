// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type MeasurementHTTPOptionsProtocol string

const (
	MeasurementHTTPOptionsProtocolHTTP  MeasurementHTTPOptionsProtocol = "HTTP"
	MeasurementHTTPOptionsProtocolHTTPS MeasurementHTTPOptionsProtocol = "HTTPS"
	MeasurementHTTPOptionsProtocolHttp2 MeasurementHTTPOptionsProtocol = "HTTP2"
)

func (e MeasurementHTTPOptionsProtocol) ToPointer() *MeasurementHTTPOptionsProtocol {
	return &e
}

func (e *MeasurementHTTPOptionsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTP":
		fallthrough
	case "HTTPS":
		fallthrough
	case "HTTP2":
		*e = MeasurementHTTPOptionsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementHTTPOptionsProtocol: %v", v)
	}
}

type Method string

const (
	MethodHead Method = "HEAD"
	MethodGet  Method = "GET"
)

func (e Method) ToPointer() *Method {
	return &e
}

func (e *Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

// Request - The HTTP request properties.
type Request struct {
	// Additional request headers. Note that the `Host` and `User-Agent` are reserved and internally overridden.
	//
	Headers map[string]string `json:"headers,omitempty"`
	// An optional override for the `Host` header. The default value is based on the `target`.
	//
	Host   *string `json:"host,omitempty"`
	Method *Method `default:"HEAD" json:"method"`
	Path   *string `json:"path,omitempty"`
	Query  *string `json:"query,omitempty"`
}

func (r Request) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Request) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Request) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Request) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *Request) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *Request) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Request) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

type MeasurementHTTPOptions struct {
	Port     *int64                          `default:"80" json:"port"`
	Protocol *MeasurementHTTPOptionsProtocol `default:"HTTPS" json:"protocol"`
	// The HTTP request properties.
	Request *Request `json:"request,omitempty"`
	// A DNS resolver to use for the query. Defaults to the probe's system resolver.
	Resolver *string `json:"resolver,omitempty"`
}

func (m MeasurementHTTPOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeasurementHTTPOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *MeasurementHTTPOptions) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MeasurementHTTPOptions) GetProtocol() *MeasurementHTTPOptionsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *MeasurementHTTPOptions) GetRequest() *Request {
	if o == nil {
		return nil
	}
	return o.Request
}

func (o *MeasurementHTTPOptions) GetResolver() *string {
	if o == nil {
		return nil
	}
	return o.Resolver
}
