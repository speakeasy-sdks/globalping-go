// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/globalping-go/pkg/types"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type FinishedHTTPTestResultTimings struct {
	DNS       *int64 `json:"dns"`
	Download  *int64 `json:"download"`
	FirstByte *int64 `json:"firstByte"`
	TCP       *int64 `json:"tcp"`
	TLS       *int64 `json:"tls"`
	Total     *int64 `json:"total"`
}

func (o *FinishedHTTPTestResultTimings) GetDNS() *int64 {
	if o == nil {
		return nil
	}
	return o.DNS
}

func (o *FinishedHTTPTestResultTimings) GetDownload() *int64 {
	if o == nil {
		return nil
	}
	return o.Download
}

func (o *FinishedHTTPTestResultTimings) GetFirstByte() *int64 {
	if o == nil {
		return nil
	}
	return o.FirstByte
}

func (o *FinishedHTTPTestResultTimings) GetTCP() *int64 {
	if o == nil {
		return nil
	}
	return o.TCP
}

func (o *FinishedHTTPTestResultTimings) GetTLS() *int64 {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *FinishedHTTPTestResultTimings) GetTotal() *int64 {
	if o == nil {
		return nil
	}
	return o.Total
}

type FinishedHTTPTestResult struct {
	// The HTTP response headers.
	Headers map[string]string `json:"headers"`
	// The raw HTTP response body. Only the first 10 kb are returned.
	RawBody string `json:"rawBody"`
	// The raw HTTP response headers.
	RawHeaders string `json:"rawHeaders"`
	// The raw output can be presented to users but is not meant to be parsed clients.
	// Please use the individual values provided in other fields for automated processing.
	//
	RawOutput string `json:"rawOutput"`
	// The resolved IP address of the `target`.
	ResolvedAddress string `json:"resolvedAddress"`
	status          string `const:"finished" json:"status"`
	// The HTTP response status code.
	StatusCode int64 `json:"statusCode"`
	// The HTTP response status code name.
	StatusCodeName string                        `json:"statusCodeName"`
	Timings        FinishedHTTPTestResultTimings `json:"timings"`
	TLS            *TLSCertificate               `json:"tls"`
}

func (f FinishedHTTPTestResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FinishedHTTPTestResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *FinishedHTTPTestResult) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *FinishedHTTPTestResult) GetRawBody() string {
	if o == nil {
		return ""
	}
	return o.RawBody
}

func (o *FinishedHTTPTestResult) GetRawHeaders() string {
	if o == nil {
		return ""
	}
	return o.RawHeaders
}

func (o *FinishedHTTPTestResult) GetRawOutput() string {
	if o == nil {
		return ""
	}
	return o.RawOutput
}

func (o *FinishedHTTPTestResult) GetResolvedAddress() string {
	if o == nil {
		return ""
	}
	return o.ResolvedAddress
}

func (o *FinishedHTTPTestResult) GetStatus() string {
	return "finished"
}

func (o *FinishedHTTPTestResult) GetStatusCode() int64 {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FinishedHTTPTestResult) GetStatusCodeName() string {
	if o == nil {
		return ""
	}
	return o.StatusCodeName
}

func (o *FinishedHTTPTestResult) GetTimings() FinishedHTTPTestResultTimings {
	if o == nil {
		return FinishedHTTPTestResultTimings{}
	}
	return o.Timings
}

func (o *FinishedHTTPTestResult) GetTLS() *TLSCertificate {
	if o == nil {
		return nil
	}
	return o.TLS
}
