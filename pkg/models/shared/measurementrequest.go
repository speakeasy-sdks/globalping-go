// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type MeasurementRequest struct {
	// Specifies if the results of the measurement should be updated while being in progress.
	// If `false`, results are populated to the measurement object only after the test finishes.
	// If `true`, partial results are returned as soon as they are available and can be presented to the user in real-time.
	// Note that only the top 5 tests from the results array will update in real-time.
	//
	InProgressUpdates *bool `json:"inProgressUpdates,omitempty"`
	// Specifies the maximum number of probes that run the measurement.
	// The result count might be lower if there aren't enough probes available in the specified locations.
	//
	Limit *int64 `json:"limit,omitempty"`
	// An array of locations from which to run the measurement.
	// Each object specifies a location using one or multiple keys.
	//
	Locations          []MeasurementLocationOption `json:"locations,omitempty"`
	MeasurementOptions interface{}                 `json:"measurementOptions,omitempty"`
	// A public endpoint on which the measurement is executed.
	// Typically a hostname or an IPv4 address. The exact format depends on the measurement type.
	//
	Target string          `json:"target"`
	Type   MeasurementType `json:"type"`
}

func (o *MeasurementRequest) GetInProgressUpdates() *bool {
	if o == nil {
		return nil
	}
	return o.InProgressUpdates
}

func (o *MeasurementRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *MeasurementRequest) GetLocations() []MeasurementLocationOption {
	if o == nil {
		return nil
	}
	return o.Locations
}

func (o *MeasurementRequest) GetMeasurementOptions() interface{} {
	if o == nil {
		return nil
	}
	return o.MeasurementOptions
}

func (o *MeasurementRequest) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *MeasurementRequest) GetType() MeasurementType {
	if o == nil {
		return MeasurementType("")
	}
	return o.Type
}
