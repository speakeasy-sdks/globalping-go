// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type Protocol string

const (
	ProtocolTCP Protocol = "TCP"
	ProtocolUDP Protocol = "UDP"
)

func (e Protocol) ToPointer() *Protocol {
	return &e
}

func (e *Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TCP":
		fallthrough
	case "UDP":
		*e = Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocol: %v", v)
	}
}

type Type string

const (
	TypeA      Type = "A"
	TypeAaaa   Type = "AAAA"
	TypeAny    Type = "ANY"
	TypeCname  Type = "CNAME"
	TypeDnskey Type = "DNSKEY"
	TypeDs     Type = "DS"
	TypeMx     Type = "MX"
	TypeNs     Type = "NS"
	TypeNsec   Type = "NSEC"
	TypePtr    Type = "PTR"
	TypeRrsig  Type = "RRSIG"
	TypeSoa    Type = "SOA"
	TypeTxt    Type = "TXT"
	TypeSrv    Type = "SRV"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ANY":
		fallthrough
	case "CNAME":
		fallthrough
	case "DNSKEY":
		fallthrough
	case "DS":
		fallthrough
	case "MX":
		fallthrough
	case "NS":
		fallthrough
	case "NSEC":
		fallthrough
	case "PTR":
		fallthrough
	case "RRSIG":
		fallthrough
	case "SOA":
		fallthrough
	case "TXT":
		fallthrough
	case "SRV":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// Query - The DNS query properties.
type Query struct {
	Type *Type `default:"A" json:"type"`
}

func (q Query) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *Query) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Query) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type MeasurementDNSOptions struct {
	Port     *int64    `default:"53" json:"port"`
	Protocol *Protocol `default:"UDP" json:"protocol"`
	// The DNS query properties.
	Query *Query `json:"query,omitempty"`
	// A DNS resolver to use for the query. Defaults to the probe's system resolver.
	Resolver *string `json:"resolver,omitempty"`
	// Toggles tracing of the delegation path from the root servers down to the target domain name.
	//
	Trace *bool `default:"false" json:"trace"`
}

func (m MeasurementDNSOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeasurementDNSOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *MeasurementDNSOptions) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MeasurementDNSOptions) GetProtocol() *Protocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *MeasurementDNSOptions) GetQuery() *Query {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *MeasurementDNSOptions) GetResolver() *string {
	if o == nil {
		return nil
	}
	return o.Resolver
}

func (o *MeasurementDNSOptions) GetTrace() *bool {
	if o == nil {
		return nil
	}
	return o.Trace
}
