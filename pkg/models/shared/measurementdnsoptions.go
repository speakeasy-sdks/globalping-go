// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type MeasurementDNSOptionsProtocol string

const (
	MeasurementDNSOptionsProtocolTCP MeasurementDNSOptionsProtocol = "TCP"
	MeasurementDNSOptionsProtocolUDP MeasurementDNSOptionsProtocol = "UDP"
)

func (e MeasurementDNSOptionsProtocol) ToPointer() *MeasurementDNSOptionsProtocol {
	return &e
}

func (e *MeasurementDNSOptionsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TCP":
		fallthrough
	case "UDP":
		*e = MeasurementDNSOptionsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementDNSOptionsProtocol: %v", v)
	}
}

type MeasurementDNSOptionsQueryType string

const (
	MeasurementDNSOptionsQueryTypeA      MeasurementDNSOptionsQueryType = "A"
	MeasurementDNSOptionsQueryTypeAaaa   MeasurementDNSOptionsQueryType = "AAAA"
	MeasurementDNSOptionsQueryTypeAny    MeasurementDNSOptionsQueryType = "ANY"
	MeasurementDNSOptionsQueryTypeCname  MeasurementDNSOptionsQueryType = "CNAME"
	MeasurementDNSOptionsQueryTypeDnskey MeasurementDNSOptionsQueryType = "DNSKEY"
	MeasurementDNSOptionsQueryTypeDs     MeasurementDNSOptionsQueryType = "DS"
	MeasurementDNSOptionsQueryTypeMx     MeasurementDNSOptionsQueryType = "MX"
	MeasurementDNSOptionsQueryTypeNs     MeasurementDNSOptionsQueryType = "NS"
	MeasurementDNSOptionsQueryTypeNsec   MeasurementDNSOptionsQueryType = "NSEC"
	MeasurementDNSOptionsQueryTypePtr    MeasurementDNSOptionsQueryType = "PTR"
	MeasurementDNSOptionsQueryTypeRrsig  MeasurementDNSOptionsQueryType = "RRSIG"
	MeasurementDNSOptionsQueryTypeSoa    MeasurementDNSOptionsQueryType = "SOA"
	MeasurementDNSOptionsQueryTypeTxt    MeasurementDNSOptionsQueryType = "TXT"
	MeasurementDNSOptionsQueryTypeSrv    MeasurementDNSOptionsQueryType = "SRV"
)

func (e MeasurementDNSOptionsQueryType) ToPointer() *MeasurementDNSOptionsQueryType {
	return &e
}

func (e *MeasurementDNSOptionsQueryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ANY":
		fallthrough
	case "CNAME":
		fallthrough
	case "DNSKEY":
		fallthrough
	case "DS":
		fallthrough
	case "MX":
		fallthrough
	case "NS":
		fallthrough
	case "NSEC":
		fallthrough
	case "PTR":
		fallthrough
	case "RRSIG":
		fallthrough
	case "SOA":
		fallthrough
	case "TXT":
		fallthrough
	case "SRV":
		*e = MeasurementDNSOptionsQueryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementDNSOptionsQueryType: %v", v)
	}
}

// MeasurementDNSOptionsQuery - The DNS query properties.
type MeasurementDNSOptionsQuery struct {
	Type *MeasurementDNSOptionsQueryType `default:"A" json:"type"`
}

func (m MeasurementDNSOptionsQuery) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeasurementDNSOptionsQuery) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeasurementDNSOptionsQuery) GetType() *MeasurementDNSOptionsQueryType {
	if o == nil {
		return nil
	}
	return o.Type
}

type MeasurementDNSOptions struct {
	Port     *int64                         `default:"53" json:"port"`
	Protocol *MeasurementDNSOptionsProtocol `default:"UDP" json:"protocol"`
	// The DNS query properties.
	Query *MeasurementDNSOptionsQuery `json:"query,omitempty"`
	// A DNS resolver to use for the query. Defaults to the probe's system resolver.
	Resolver interface{} `json:"resolver,omitempty"`
	// Toggles tracing of the delegation path from the root servers down to the target domain name.
	//
	Trace *bool `default:"false" json:"trace"`
}

func (m MeasurementDNSOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeasurementDNSOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *MeasurementDNSOptions) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MeasurementDNSOptions) GetProtocol() *MeasurementDNSOptionsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *MeasurementDNSOptions) GetQuery() *MeasurementDNSOptionsQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *MeasurementDNSOptions) GetResolver() interface{} {
	if o == nil {
		return nil
	}
	return o.Resolver
}

func (o *MeasurementDNSOptions) GetTrace() *bool {
	if o == nil {
		return nil
	}
	return o.Trace
}
