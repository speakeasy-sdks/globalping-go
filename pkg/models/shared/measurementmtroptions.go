// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MeasurementMtrOptionsProtocol string

const (
	MeasurementMtrOptionsProtocolIcmp MeasurementMtrOptionsProtocol = "ICMP"
	MeasurementMtrOptionsProtocolTCP  MeasurementMtrOptionsProtocol = "TCP"
	MeasurementMtrOptionsProtocolUDP  MeasurementMtrOptionsProtocol = "UDP"
)

func (e MeasurementMtrOptionsProtocol) ToPointer() *MeasurementMtrOptionsProtocol {
	return &e
}

func (e *MeasurementMtrOptionsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ICMP":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = MeasurementMtrOptionsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementMtrOptionsProtocol: %v", v)
	}
}

type MeasurementMtrOptions struct {
	Packets  *int64                         `json:"packets,omitempty"`
	Port     *int64                         `json:"port,omitempty"`
	Protocol *MeasurementMtrOptionsProtocol `json:"protocol,omitempty"`
}

func (o *MeasurementMtrOptions) GetPackets() *int64 {
	if o == nil {
		return nil
	}
	return o.Packets
}

func (o *MeasurementMtrOptions) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MeasurementMtrOptions) GetProtocol() *MeasurementMtrOptionsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}
