// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type MeasurementLocationsType string

const (
	MeasurementLocationsTypeArrayOfMeasurementLocationOption MeasurementLocationsType = "arrayOfMeasurementLocationOption"
	MeasurementLocationsTypeStr                              MeasurementLocationsType = "str"
)

type MeasurementLocations struct {
	ArrayOfMeasurementLocationOption []MeasurementLocationOption
	Str                              *string

	Type MeasurementLocationsType
}

func CreateMeasurementLocationsArrayOfMeasurementLocationOption(arrayOfMeasurementLocationOption []MeasurementLocationOption) MeasurementLocations {
	typ := MeasurementLocationsTypeArrayOfMeasurementLocationOption

	return MeasurementLocations{
		ArrayOfMeasurementLocationOption: arrayOfMeasurementLocationOption,
		Type:                             typ,
	}
}

func CreateMeasurementLocationsStr(str string) MeasurementLocations {
	typ := MeasurementLocationsTypeStr

	return MeasurementLocations{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeasurementLocations) UnmarshalJSON(data []byte) error {

	arrayOfMeasurementLocationOption := []MeasurementLocationOption{}
	if err := utils.UnmarshalJSON(data, &arrayOfMeasurementLocationOption, "", true, true); err == nil {
		u.ArrayOfMeasurementLocationOption = arrayOfMeasurementLocationOption
		u.Type = MeasurementLocationsTypeArrayOfMeasurementLocationOption
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeasurementLocationsTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MeasurementLocations) MarshalJSON() ([]byte, error) {
	if u.ArrayOfMeasurementLocationOption != nil {
		return utils.MarshalJSON(u.ArrayOfMeasurementLocationOption, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
