// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/globalping-go/pkg/types"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

// Stats - Summary `rtt` and packet loss statistics.
// All times are in milliseconds.
type Stats struct {
	Avg *float64 `json:"avg"`
	// The number of dropped packets (`total` - `rcv`).
	Drop int64 `json:"drop"`
	// The percentage of dropped packets.
	Loss float64  `json:"loss"`
	Max  *float64 `json:"max"`
	Min  *float64 `json:"min"`
	// The number of received packets.
	Rcv int64 `json:"rcv"`
	// The number of sent packets.
	Total int64 `json:"total"`
}

func (o *Stats) GetAvg() *float64 {
	if o == nil {
		return nil
	}
	return o.Avg
}

func (o *Stats) GetDrop() int64 {
	if o == nil {
		return 0
	}
	return o.Drop
}

func (o *Stats) GetLoss() float64 {
	if o == nil {
		return 0.0
	}
	return o.Loss
}

func (o *Stats) GetMax() *float64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *Stats) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *Stats) GetRcv() int64 {
	if o == nil {
		return 0
	}
	return o.Rcv
}

func (o *Stats) GetTotal() int64 {
	if o == nil {
		return 0
	}
	return o.Total
}

type FinishedPingTestResultTimings struct {
	// The round-trip time for this packet.
	Rtt float64 `json:"rtt"`
	// The packet time-to-live value.
	TTL float64 `json:"ttl"`
}

func (o *FinishedPingTestResultTimings) GetRtt() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rtt
}

func (o *FinishedPingTestResultTimings) GetTTL() float64 {
	if o == nil {
		return 0.0
	}
	return o.TTL
}

type FinishedPingTestResult struct {
	// The raw output can be presented to users but is not meant to be parsed clients.
	// Please use the individual values provided in other fields for automated processing.
	//
	RawOutput string `json:"rawOutput"`
	// The resolved IP address of the `target`.
	ResolvedAddress string `json:"resolvedAddress"`
	// The resolved hostname of the `target`.
	ResolvedHostname *string `json:"resolvedHostname"`
	// Summary `rtt` and packet loss statistics.
	// All times are in milliseconds.
	//
	Stats  Stats  `json:"stats"`
	status string `const:"finished" json:"status"`
	// Details for each sent packet.
	// All times are in milliseconds.
	//
	Timings []FinishedPingTestResultTimings `json:"timings"`
}

func (f FinishedPingTestResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FinishedPingTestResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *FinishedPingTestResult) GetRawOutput() string {
	if o == nil {
		return ""
	}
	return o.RawOutput
}

func (o *FinishedPingTestResult) GetResolvedAddress() string {
	if o == nil {
		return ""
	}
	return o.ResolvedAddress
}

func (o *FinishedPingTestResult) GetResolvedHostname() *string {
	if o == nil {
		return nil
	}
	return o.ResolvedHostname
}

func (o *FinishedPingTestResult) GetStats() Stats {
	if o == nil {
		return Stats{}
	}
	return o.Stats
}

func (o *FinishedPingTestResult) GetStatus() string {
	return "finished"
}

func (o *FinishedPingTestResult) GetTimings() []FinishedPingTestResultTimings {
	if o == nil {
		return []FinishedPingTestResultTimings{}
	}
	return o.Timings
}
