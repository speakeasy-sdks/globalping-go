// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type MeasurementOptionsType string

const (
	MeasurementOptionsTypeMeasurementPingOptions       MeasurementOptionsType = "MeasurementPingOptions"
	MeasurementOptionsTypeMeasurementTracerouteOptions MeasurementOptionsType = "MeasurementTracerouteOptions"
	MeasurementOptionsTypeMeasurementDNSOptions        MeasurementOptionsType = "MeasurementDnsOptions"
	MeasurementOptionsTypeMeasurementMtrOptions        MeasurementOptionsType = "MeasurementMtrOptions"
	MeasurementOptionsTypeMeasurementHTTPOptions       MeasurementOptionsType = "MeasurementHttpOptions"
)

type MeasurementOptions struct {
	MeasurementPingOptions       *MeasurementPingOptions
	MeasurementTracerouteOptions *MeasurementTracerouteOptions
	MeasurementDNSOptions        *MeasurementDNSOptions
	MeasurementMtrOptions        *MeasurementMtrOptions
	MeasurementHTTPOptions       *MeasurementHTTPOptions

	Type MeasurementOptionsType
}

func CreateMeasurementOptionsMeasurementPingOptions(measurementPingOptions MeasurementPingOptions) MeasurementOptions {
	typ := MeasurementOptionsTypeMeasurementPingOptions

	return MeasurementOptions{
		MeasurementPingOptions: &measurementPingOptions,
		Type:                   typ,
	}
}

func CreateMeasurementOptionsMeasurementTracerouteOptions(measurementTracerouteOptions MeasurementTracerouteOptions) MeasurementOptions {
	typ := MeasurementOptionsTypeMeasurementTracerouteOptions

	return MeasurementOptions{
		MeasurementTracerouteOptions: &measurementTracerouteOptions,
		Type:                         typ,
	}
}

func CreateMeasurementOptionsMeasurementDNSOptions(measurementDNSOptions MeasurementDNSOptions) MeasurementOptions {
	typ := MeasurementOptionsTypeMeasurementDNSOptions

	return MeasurementOptions{
		MeasurementDNSOptions: &measurementDNSOptions,
		Type:                  typ,
	}
}

func CreateMeasurementOptionsMeasurementMtrOptions(measurementMtrOptions MeasurementMtrOptions) MeasurementOptions {
	typ := MeasurementOptionsTypeMeasurementMtrOptions

	return MeasurementOptions{
		MeasurementMtrOptions: &measurementMtrOptions,
		Type:                  typ,
	}
}

func CreateMeasurementOptionsMeasurementHTTPOptions(measurementHTTPOptions MeasurementHTTPOptions) MeasurementOptions {
	typ := MeasurementOptionsTypeMeasurementHTTPOptions

	return MeasurementOptions{
		MeasurementHTTPOptions: &measurementHTTPOptions,
		Type:                   typ,
	}
}

func (u *MeasurementOptions) UnmarshalJSON(data []byte) error {

	measurementPingOptions := new(MeasurementPingOptions)
	if err := utils.UnmarshalJSON(data, &measurementPingOptions, "", true, true); err == nil {
		u.MeasurementPingOptions = measurementPingOptions
		u.Type = MeasurementOptionsTypeMeasurementPingOptions
		return nil
	}

	measurementTracerouteOptions := new(MeasurementTracerouteOptions)
	if err := utils.UnmarshalJSON(data, &measurementTracerouteOptions, "", true, true); err == nil {
		u.MeasurementTracerouteOptions = measurementTracerouteOptions
		u.Type = MeasurementOptionsTypeMeasurementTracerouteOptions
		return nil
	}

	measurementMtrOptions := new(MeasurementMtrOptions)
	if err := utils.UnmarshalJSON(data, &measurementMtrOptions, "", true, true); err == nil {
		u.MeasurementMtrOptions = measurementMtrOptions
		u.Type = MeasurementOptionsTypeMeasurementMtrOptions
		return nil
	}

	measurementHTTPOptions := new(MeasurementHTTPOptions)
	if err := utils.UnmarshalJSON(data, &measurementHTTPOptions, "", true, true); err == nil {
		u.MeasurementHTTPOptions = measurementHTTPOptions
		u.Type = MeasurementOptionsTypeMeasurementHTTPOptions
		return nil
	}

	measurementDNSOptions := new(MeasurementDNSOptions)
	if err := utils.UnmarshalJSON(data, &measurementDNSOptions, "", true, true); err == nil {
		u.MeasurementDNSOptions = measurementDNSOptions
		u.Type = MeasurementOptionsTypeMeasurementDNSOptions
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MeasurementOptions) MarshalJSON() ([]byte, error) {
	if u.MeasurementPingOptions != nil {
		return utils.MarshalJSON(u.MeasurementPingOptions, "", true)
	}

	if u.MeasurementTracerouteOptions != nil {
		return utils.MarshalJSON(u.MeasurementTracerouteOptions, "", true)
	}

	if u.MeasurementDNSOptions != nil {
		return utils.MarshalJSON(u.MeasurementDNSOptions, "", true)
	}

	if u.MeasurementMtrOptions != nil {
		return utils.MarshalJSON(u.MeasurementMtrOptions, "", true)
	}

	if u.MeasurementHTTPOptions != nil {
		return utils.MarshalJSON(u.MeasurementHTTPOptions, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
