// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
	"time"
)

// TLSCertificate - The TLS session information.
type TLSCertificate struct {
	// `true` if the certificate is valid and signed by a trusted authority, `false` otherwise.
	//
	Authorized bool      `json:"authorized"`
	CreatedAt  time.Time `json:"createdAt"`
	// The reason for rejecting the certificate if `authorized` is `false`.
	//
	Error     *string               `json:"error,omitempty"`
	ExpiresAt time.Time             `json:"expiresAt"`
	Issuer    TLSCertificateIssuer  `json:"issuer"`
	Subject   TLSCertificateSubject `json:"subject"`
}

func (t TLSCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TLSCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TLSCertificate) GetAuthorized() bool {
	if o == nil {
		return false
	}
	return o.Authorized
}

func (o *TLSCertificate) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TLSCertificate) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *TLSCertificate) GetExpiresAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExpiresAt
}

func (o *TLSCertificate) GetIssuer() TLSCertificateIssuer {
	if o == nil {
		return TLSCertificateIssuer{}
	}
	return o.Issuer
}

func (o *TLSCertificate) GetSubject() TLSCertificateSubject {
	if o == nil {
		return TLSCertificateSubject{}
	}
	return o.Subject
}
