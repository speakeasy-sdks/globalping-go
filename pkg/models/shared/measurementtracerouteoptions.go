// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MeasurementTracerouteOptionsProtocol string

const (
	MeasurementTracerouteOptionsProtocolIcmp MeasurementTracerouteOptionsProtocol = "ICMP"
	MeasurementTracerouteOptionsProtocolTCP  MeasurementTracerouteOptionsProtocol = "TCP"
	MeasurementTracerouteOptionsProtocolUDP  MeasurementTracerouteOptionsProtocol = "UDP"
)

func (e MeasurementTracerouteOptionsProtocol) ToPointer() *MeasurementTracerouteOptionsProtocol {
	return &e
}

func (e *MeasurementTracerouteOptionsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ICMP":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = MeasurementTracerouteOptionsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementTracerouteOptionsProtocol: %v", v)
	}
}

type MeasurementTracerouteOptions struct {
	Port     *int64                                `json:"port,omitempty"`
	Protocol *MeasurementTracerouteOptionsProtocol `json:"protocol,omitempty"`
}

func (o *MeasurementTracerouteOptions) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MeasurementTracerouteOptions) GetProtocol() *MeasurementTracerouteOptionsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}
