// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
)

type MeasurementTracerouteOptionsProtocol string

const (
	MeasurementTracerouteOptionsProtocolIcmp MeasurementTracerouteOptionsProtocol = "ICMP"
	MeasurementTracerouteOptionsProtocolTCP  MeasurementTracerouteOptionsProtocol = "TCP"
	MeasurementTracerouteOptionsProtocolUDP  MeasurementTracerouteOptionsProtocol = "UDP"
)

func (e MeasurementTracerouteOptionsProtocol) ToPointer() *MeasurementTracerouteOptionsProtocol {
	return &e
}

func (e *MeasurementTracerouteOptionsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ICMP":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = MeasurementTracerouteOptionsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementTracerouteOptionsProtocol: %v", v)
	}
}

type MeasurementTracerouteOptions struct {
	AdditionalProperties map[string]interface{}                `additionalProperties:"true" json:"-"`
	Port                 *int64                                `default:"80" json:"port"`
	Protocol             *MeasurementTracerouteOptionsProtocol `default:"ICMP" json:"protocol"`
}

func (m MeasurementTracerouteOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeasurementTracerouteOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *MeasurementTracerouteOptions) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *MeasurementTracerouteOptions) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MeasurementTracerouteOptions) GetProtocol() *MeasurementTracerouteOptionsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}
