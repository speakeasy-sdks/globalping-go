// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"net/http"
)

type CreateMeasurementMeasurementsError struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}

func (o *CreateMeasurementMeasurementsError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateMeasurementMeasurementsError) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateMeasurementMeasurementsResponseResponseBody - Too Many Requests
type CreateMeasurementMeasurementsResponseResponseBody struct {
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response                     `json:"-"`
	Error_      CreateMeasurementMeasurementsError `json:"error"`
}

var _ error = &CreateMeasurementMeasurementsResponseResponseBody{}

func (e *CreateMeasurementMeasurementsResponseResponseBody) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type CreateMeasurementError struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}

func (o *CreateMeasurementError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateMeasurementError) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateMeasurementMeasurementsResponseBody - Unprocessable Entity
type CreateMeasurementMeasurementsResponseBody struct {
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response         `json:"-"`
	Error_      CreateMeasurementError `json:"error"`
}

var _ error = &CreateMeasurementMeasurementsResponseBody{}

func (e *CreateMeasurementMeasurementsResponseBody) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type Error struct {
	Message string            `json:"message"`
	Params  map[string]string `json:"params,omitempty"`
	Type    string            `json:"type"`
}

func (o *Error) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *Error) GetParams() map[string]string {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *Error) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateMeasurementResponseBody - Bad Request
type CreateMeasurementResponseBody struct {
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
	Error_      Error          `json:"error"`
}

var _ error = &CreateMeasurementResponseBody{}

func (e *CreateMeasurementResponseBody) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
