// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/globalping-go/pkg/models/shared"
	"github.com/speakeasy-sdks/globalping-go/pkg/utils"
	"net/http"
	"time"
)

type GetMeasurementRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetMeasurementRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetMeasurementResponseBody - Success
type GetMeasurementResponseBody struct {
	// Time when the measurement was created.
	CreatedAt          time.Time                    `json:"createdAt"`
	ID                 string                       `json:"id"`
	Limit              *int64                       `default:"1" json:"limit"`
	Locations          *shared.MeasurementLocations `json:"locations,omitempty"`
	MeasurementOptions *shared.MeasurementOptions   `json:"measurementOptions,omitempty"`
	// The number of probes that performed the measurement. Smaller or equal to `limit`.
	ProbesCount int64 `json:"probesCount"`
	// The measurement results.
	Results []shared.MeasurementResultItem `json:"results"`
	// The measurement status. Any value other than `in-progress` is final.
	Status shared.MeasurementStatus `json:"status"`
	// A public endpoint on which the measurement is executed.
	// Typically a hostname or an IPv4 address. The exact format depends on the measurement type.
	//
	Target string                 `json:"target"`
	Type   shared.MeasurementType `json:"type"`
	// Time when the measurement was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

func (g GetMeasurementResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetMeasurementResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetMeasurementResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetMeasurementResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetMeasurementResponseBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetMeasurementResponseBody) GetLocations() *shared.MeasurementLocations {
	if o == nil {
		return nil
	}
	return o.Locations
}

func (o *GetMeasurementResponseBody) GetMeasurementOptions() *shared.MeasurementOptions {
	if o == nil {
		return nil
	}
	return o.MeasurementOptions
}

func (o *GetMeasurementResponseBody) GetProbesCount() int64 {
	if o == nil {
		return 0
	}
	return o.ProbesCount
}

func (o *GetMeasurementResponseBody) GetResults() []shared.MeasurementResultItem {
	if o == nil {
		return []shared.MeasurementResultItem{}
	}
	return o.Results
}

func (o *GetMeasurementResponseBody) GetStatus() shared.MeasurementStatus {
	if o == nil {
		return shared.MeasurementStatus("")
	}
	return o.Status
}

func (o *GetMeasurementResponseBody) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *GetMeasurementResponseBody) GetType() shared.MeasurementType {
	if o == nil {
		return shared.MeasurementType("")
	}
	return o.Type
}

func (o *GetMeasurementResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type GetMeasurementResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Object *GetMeasurementResponseBody
}

func (o *GetMeasurementResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetMeasurementResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetMeasurementResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetMeasurementResponse) GetObject() *GetMeasurementResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
